import openai
import time
import os


class TextConverterToReport:
    def split_text(self, text, num_parts):
        """
        Splits the given text content into specified portions.

        Args:
            text (str): The text content to be split.
            num_parts (int): The number of portions to split the text content into.

        Returns:
            list: A list containing the split text content.
                Each element in the list represents a portion of the text content.

        Notes:
            - The function splits the text content into portions based on the specified number of portions.
            - The length of the returned list will be equal to the specified number of portions.
        """

        parts = ["會議記錄部分一", "會議記錄部分二", "會議記錄部分三", "會議記錄部分四"]

        return parts

    def call_openaiapi(self, prompt):
        """
        Calls the OpenAI API to get a response for the given prompt.

        Args:
            prompt (list[dict]): The list of dictionaries representing the prompt/questions to ask OpenAI.
                Each dictionary should have the following keys:
                - 'role' (str): The role or category of the content in the prompt.
                - 'content' (str): The specific content or question associated with the role.

        Returns:
            output (str): The response generated by OpenAI for the given prompt.

        Notes:
            - The prompt should be a list of dictionaries, where each dictionary represents a part of the prompt or a question.
            - Each dictionary in the prompt list should have 'role' and 'content' keys, corresponding to the role and content values.
            - The function internally sets up the necessary parameters such as model, max_tokens, temperature, and prompt format for the API call.
        """
        output = prompt + ": OpenAI 會議總結資訊"

        return output

    def generate_report(self, meeting_topic, ori_text):
        """
        Generates a meeting summary from a transcript file converted from an audio recording.

        Args:
            topic (string): 
            transcript_file_path (str): The file path of the transcript file.

        Returns:
            meetingreport (str) : The generated meeting summary.

        Notes:
            - The transcript file should be in a plain text format.
            - The generated meeting summary includes key points and highlights from the transcript.
        """

        prompt = "請幫我總結..."
        final = self.call_openaiapi(prompt)

        return final_report
